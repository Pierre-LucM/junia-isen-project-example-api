name: "CI - API  Lint and run Test"

on:
  workflow_call:
    inputs:
      python_version:
        description: "Python version to use"
        required: true
        default: "3"
        type: string

jobs:
  initialize-linux-environment:
    uses: ./.github/workflows/initialize_linux_env.yml
    with:
      distros: '["ubuntu-22.04"]'
      # setup commands to install python3, pip3, and python3-venv packages
      # Purpose: Install python3, pip3, and python3-venv packages on the runner.
      commands: '["sudo apt update", "sudo apt install -y sudo", "sudo apt install -y git curl",  "sudo apt install -y python3-pip", "sudo apt install -y python3-venv"]'
      # Print versions of git, python3, and pip3
      # Purpose: Print the versions of git, python3, and pip3 on the runner.
      version_commands: '["git --version", "python3 --version", "pip3 --version"]'


  test:
    needs: initialize-linux-environment
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      # Purpose: Checkout the code from the repository. The code is checked out to the $GITHUB_WORKSPACE directory.
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Create env file
        run: |
            echo "COSMOS_ENDPOINT=${{ secrets.COSMOS_ENDPOINT }}" >> $PWD/.env
            echo "COSMOS_KEY=${{ secrets.COSMOS_KEY }}" >> $PWD/.env
          
        # Setup Python
        # Purpose: Install the specified Python versions on the runner.
      - name: Setup Python
        run: |
          sudo apt install -y python${{ inputs.python_version }}

      # Check if Python is installed and exit if not
      # Purpose: Check if the specified Python versions are installed on the runner. If not, exit the workflow. note: The workflow will exit if any of the specified Python versions are not installed.
      - name: Check if Python is installed and exit if not
        run: |
            python_version=(${{inputs.python_version }})
            for version in "${python_version[@]}"; do
              if ! command -v python$version &> /dev/null; then
                  echo "Python $version could not be found"
                  exit 1
              fi
            done
      # Install uv
      # Purpose: uv is a dependency manager and tool for managing Python projects.
      - name: Install uv
        run: pip install uv

      # Install dependencies and create virtual environment
      # Purpose: Install dependencies and create a virtual environment for the project.
      - name: Install dependencies and create virtual environment
        run: uv sync

      # Run linter (flake8)
      # Purpose: Run the flake8 linter on the project. The linter checks for PEP8 compliance.
      - name: Run linter (flake8)
        run: uv run flake8 --max-line-length=120 $GITHUB_WORKSPACE/api


        # Run API tests
        # Purpose: Run the API tests using pytest. The tests are located in the api/tests directory.
      - name: Run API tests
        run: uv run pytest $GITHUB_WORKSPACE/api/tests
      